# Generated by the Protocol Buffers compiler. DO NOT EDIT!
# source: exchanges_wrapper/api.proto
# plugin: grpclib.plugin.main
import abc
import typing

import grpclib.const
import grpclib.client
if typing.TYPE_CHECKING:
    import grpclib.server

import exchanges_wrapper.api_pb2


class MartinBase(abc.ABC):

    @abc.abstractmethod
    async def OpenClientConnection(self, stream: 'grpclib.server.Stream[exchanges_wrapper.api_pb2.OpenClientConnectionRequest, exchanges_wrapper.api_pb2.OpenClientConnectionId]') -> None:
        pass

    @abc.abstractmethod
    async def FetchServerTime(self, stream: 'grpclib.server.Stream[exchanges_wrapper.api_pb2.OpenClientConnectionId, exchanges_wrapper.api_pb2.FetchServerTimeResponse]') -> None:
        pass

    @abc.abstractmethod
    async def FetchOpenOrders(self, stream: 'grpclib.server.Stream[exchanges_wrapper.api_pb2.MarketRequest, exchanges_wrapper.api_pb2.FetchOpenOrdersResponse]') -> None:
        pass

    @abc.abstractmethod
    async def CancelAllOrders(self, stream: 'grpclib.server.Stream[exchanges_wrapper.api_pb2.MarketRequest, exchanges_wrapper.api_pb2.SimpleResponse]') -> None:
        pass

    @abc.abstractmethod
    async def FetchExchangeInfoSymbol(self, stream: 'grpclib.server.Stream[exchanges_wrapper.api_pb2.MarketRequest, exchanges_wrapper.api_pb2.FetchExchangeInfoSymbolResponse]') -> None:
        pass

    @abc.abstractmethod
    async def FetchAccountInformation(self, stream: 'grpclib.server.Stream[exchanges_wrapper.api_pb2.OpenClientConnectionId, exchanges_wrapper.api_pb2.FetchAccountBalanceResponse]') -> None:
        pass

    @abc.abstractmethod
    async def FetchOrderBook(self, stream: 'grpclib.server.Stream[exchanges_wrapper.api_pb2.MarketRequest, exchanges_wrapper.api_pb2.FetchOrderBookResponse]') -> None:
        pass

    @abc.abstractmethod
    async def FetchSymbolPriceTicker(self, stream: 'grpclib.server.Stream[exchanges_wrapper.api_pb2.MarketRequest, exchanges_wrapper.api_pb2.FetchSymbolPriceTickerResponse]') -> None:
        pass

    @abc.abstractmethod
    async def FetchTickerPriceChangeStatistics(self, stream: 'grpclib.server.Stream[exchanges_wrapper.api_pb2.MarketRequest, exchanges_wrapper.api_pb2.FetchTickerPriceChangeStatisticsResponse]') -> None:
        pass

    @abc.abstractmethod
    async def FetchKlines(self, stream: 'grpclib.server.Stream[exchanges_wrapper.api_pb2.FetchKlinesRequest, exchanges_wrapper.api_pb2.FetchKlinesResponse]') -> None:
        pass

    @abc.abstractmethod
    async def FetchAccountTradeList(self, stream: 'grpclib.server.Stream[exchanges_wrapper.api_pb2.AccountTradeListRequest, exchanges_wrapper.api_pb2.AccountTradeListResponse]') -> None:
        pass

    @abc.abstractmethod
    async def OnTickerUpdate(self, stream: 'grpclib.server.Stream[exchanges_wrapper.api_pb2.MarketRequest, exchanges_wrapper.api_pb2.OnTickerUpdateResponse]') -> None:
        pass

    @abc.abstractmethod
    async def OnOrderBookUpdate(self, stream: 'grpclib.server.Stream[exchanges_wrapper.api_pb2.MarketRequest, exchanges_wrapper.api_pb2.FetchOrderBookResponse]') -> None:
        pass

    @abc.abstractmethod
    async def StopStream(self, stream: 'grpclib.server.Stream[exchanges_wrapper.api_pb2.MarketRequest, exchanges_wrapper.api_pb2.SimpleResponse]') -> None:
        pass

    @abc.abstractmethod
    async def StartStream(self, stream: 'grpclib.server.Stream[exchanges_wrapper.api_pb2.StartStreamRequest, exchanges_wrapper.api_pb2.SimpleResponse]') -> None:
        pass

    @abc.abstractmethod
    async def OnFundsUpdate(self, stream: 'grpclib.server.Stream[exchanges_wrapper.api_pb2.OnFundsUpdateRequest, exchanges_wrapper.api_pb2.OnFundsUpdateResponse]') -> None:
        pass

    @abc.abstractmethod
    async def OnBalanceUpdate(self, stream: 'grpclib.server.Stream[exchanges_wrapper.api_pb2.MarketRequest, exchanges_wrapper.api_pb2.OnBalanceUpdateResponse]') -> None:
        pass

    @abc.abstractmethod
    async def OnOrderUpdate(self, stream: 'grpclib.server.Stream[exchanges_wrapper.api_pb2.MarketRequest, exchanges_wrapper.api_pb2.SimpleResponse]') -> None:
        pass

    @abc.abstractmethod
    async def CreateLimitOrder(self, stream: 'grpclib.server.Stream[exchanges_wrapper.api_pb2.CreateLimitOrderRequest, exchanges_wrapper.api_pb2.CreateLimitOrderResponse]') -> None:
        pass

    @abc.abstractmethod
    async def CancelOrder(self, stream: 'grpclib.server.Stream[exchanges_wrapper.api_pb2.CancelOrderRequest, exchanges_wrapper.api_pb2.CancelOrderResponse]') -> None:
        pass

    @abc.abstractmethod
    async def FetchOrder(self, stream: 'grpclib.server.Stream[exchanges_wrapper.api_pb2.FetchOrderRequest, exchanges_wrapper.api_pb2.FetchOrderResponse]') -> None:
        pass

    @abc.abstractmethod
    async def ResetRateLimit(self, stream: 'grpclib.server.Stream[exchanges_wrapper.api_pb2.OpenClientConnectionId, exchanges_wrapper.api_pb2.SimpleResponse]') -> None:
        pass

    @abc.abstractmethod
    async def OnKlinesUpdate(self, stream: 'grpclib.server.Stream[exchanges_wrapper.api_pb2.FetchKlinesRequest, exchanges_wrapper.api_pb2.OnKlinesUpdateResponse]') -> None:
        pass

    @abc.abstractmethod
    async def FetchFundingWallet(self, stream: 'grpclib.server.Stream[exchanges_wrapper.api_pb2.FetchFundingWalletRequest, exchanges_wrapper.api_pb2.FetchFundingWalletResponse]') -> None:
        pass

    @abc.abstractmethod
    async def TransferToMaster(self, stream: 'grpclib.server.Stream[exchanges_wrapper.api_pb2.MarketRequest, exchanges_wrapper.api_pb2.SimpleResponse]') -> None:
        pass

    @abc.abstractmethod
    async def CheckStream(self, stream: 'grpclib.server.Stream[exchanges_wrapper.api_pb2.MarketRequest, exchanges_wrapper.api_pb2.SimpleResponse]') -> None:
        pass

    @abc.abstractmethod
    async def OneClickArrivalDeposit(self, stream: 'grpclib.server.Stream[exchanges_wrapper.api_pb2.MarketRequest, exchanges_wrapper.api_pb2.SimpleResponse]') -> None:
        pass

    def __mapping__(self) -> typing.Dict[str, grpclib.const.Handler]:
        return {
            '/martin.Martin/OpenClientConnection': grpclib.const.Handler(
                self.OpenClientConnection,
                grpclib.const.Cardinality.UNARY_UNARY,
                exchanges_wrapper.api_pb2.OpenClientConnectionRequest,
                exchanges_wrapper.api_pb2.OpenClientConnectionId,
            ),
            '/martin.Martin/FetchServerTime': grpclib.const.Handler(
                self.FetchServerTime,
                grpclib.const.Cardinality.UNARY_UNARY,
                exchanges_wrapper.api_pb2.OpenClientConnectionId,
                exchanges_wrapper.api_pb2.FetchServerTimeResponse,
            ),
            '/martin.Martin/FetchOpenOrders': grpclib.const.Handler(
                self.FetchOpenOrders,
                grpclib.const.Cardinality.UNARY_UNARY,
                exchanges_wrapper.api_pb2.MarketRequest,
                exchanges_wrapper.api_pb2.FetchOpenOrdersResponse,
            ),
            '/martin.Martin/CancelAllOrders': grpclib.const.Handler(
                self.CancelAllOrders,
                grpclib.const.Cardinality.UNARY_UNARY,
                exchanges_wrapper.api_pb2.MarketRequest,
                exchanges_wrapper.api_pb2.SimpleResponse,
            ),
            '/martin.Martin/FetchExchangeInfoSymbol': grpclib.const.Handler(
                self.FetchExchangeInfoSymbol,
                grpclib.const.Cardinality.UNARY_UNARY,
                exchanges_wrapper.api_pb2.MarketRequest,
                exchanges_wrapper.api_pb2.FetchExchangeInfoSymbolResponse,
            ),
            '/martin.Martin/FetchAccountInformation': grpclib.const.Handler(
                self.FetchAccountInformation,
                grpclib.const.Cardinality.UNARY_UNARY,
                exchanges_wrapper.api_pb2.OpenClientConnectionId,
                exchanges_wrapper.api_pb2.FetchAccountBalanceResponse,
            ),
            '/martin.Martin/FetchOrderBook': grpclib.const.Handler(
                self.FetchOrderBook,
                grpclib.const.Cardinality.UNARY_UNARY,
                exchanges_wrapper.api_pb2.MarketRequest,
                exchanges_wrapper.api_pb2.FetchOrderBookResponse,
            ),
            '/martin.Martin/FetchSymbolPriceTicker': grpclib.const.Handler(
                self.FetchSymbolPriceTicker,
                grpclib.const.Cardinality.UNARY_UNARY,
                exchanges_wrapper.api_pb2.MarketRequest,
                exchanges_wrapper.api_pb2.FetchSymbolPriceTickerResponse,
            ),
            '/martin.Martin/FetchTickerPriceChangeStatistics': grpclib.const.Handler(
                self.FetchTickerPriceChangeStatistics,
                grpclib.const.Cardinality.UNARY_UNARY,
                exchanges_wrapper.api_pb2.MarketRequest,
                exchanges_wrapper.api_pb2.FetchTickerPriceChangeStatisticsResponse,
            ),
            '/martin.Martin/FetchKlines': grpclib.const.Handler(
                self.FetchKlines,
                grpclib.const.Cardinality.UNARY_UNARY,
                exchanges_wrapper.api_pb2.FetchKlinesRequest,
                exchanges_wrapper.api_pb2.FetchKlinesResponse,
            ),
            '/martin.Martin/FetchAccountTradeList': grpclib.const.Handler(
                self.FetchAccountTradeList,
                grpclib.const.Cardinality.UNARY_UNARY,
                exchanges_wrapper.api_pb2.AccountTradeListRequest,
                exchanges_wrapper.api_pb2.AccountTradeListResponse,
            ),
            '/martin.Martin/OnTickerUpdate': grpclib.const.Handler(
                self.OnTickerUpdate,
                grpclib.const.Cardinality.UNARY_STREAM,
                exchanges_wrapper.api_pb2.MarketRequest,
                exchanges_wrapper.api_pb2.OnTickerUpdateResponse,
            ),
            '/martin.Martin/OnOrderBookUpdate': grpclib.const.Handler(
                self.OnOrderBookUpdate,
                grpclib.const.Cardinality.UNARY_STREAM,
                exchanges_wrapper.api_pb2.MarketRequest,
                exchanges_wrapper.api_pb2.FetchOrderBookResponse,
            ),
            '/martin.Martin/StopStream': grpclib.const.Handler(
                self.StopStream,
                grpclib.const.Cardinality.UNARY_UNARY,
                exchanges_wrapper.api_pb2.MarketRequest,
                exchanges_wrapper.api_pb2.SimpleResponse,
            ),
            '/martin.Martin/StartStream': grpclib.const.Handler(
                self.StartStream,
                grpclib.const.Cardinality.UNARY_UNARY,
                exchanges_wrapper.api_pb2.StartStreamRequest,
                exchanges_wrapper.api_pb2.SimpleResponse,
            ),
            '/martin.Martin/OnFundsUpdate': grpclib.const.Handler(
                self.OnFundsUpdate,
                grpclib.const.Cardinality.UNARY_STREAM,
                exchanges_wrapper.api_pb2.OnFundsUpdateRequest,
                exchanges_wrapper.api_pb2.OnFundsUpdateResponse,
            ),
            '/martin.Martin/OnBalanceUpdate': grpclib.const.Handler(
                self.OnBalanceUpdate,
                grpclib.const.Cardinality.UNARY_STREAM,
                exchanges_wrapper.api_pb2.MarketRequest,
                exchanges_wrapper.api_pb2.OnBalanceUpdateResponse,
            ),
            '/martin.Martin/OnOrderUpdate': grpclib.const.Handler(
                self.OnOrderUpdate,
                grpclib.const.Cardinality.UNARY_STREAM,
                exchanges_wrapper.api_pb2.MarketRequest,
                exchanges_wrapper.api_pb2.SimpleResponse,
            ),
            '/martin.Martin/CreateLimitOrder': grpclib.const.Handler(
                self.CreateLimitOrder,
                grpclib.const.Cardinality.UNARY_UNARY,
                exchanges_wrapper.api_pb2.CreateLimitOrderRequest,
                exchanges_wrapper.api_pb2.CreateLimitOrderResponse,
            ),
            '/martin.Martin/CancelOrder': grpclib.const.Handler(
                self.CancelOrder,
                grpclib.const.Cardinality.UNARY_UNARY,
                exchanges_wrapper.api_pb2.CancelOrderRequest,
                exchanges_wrapper.api_pb2.CancelOrderResponse,
            ),
            '/martin.Martin/FetchOrder': grpclib.const.Handler(
                self.FetchOrder,
                grpclib.const.Cardinality.UNARY_UNARY,
                exchanges_wrapper.api_pb2.FetchOrderRequest,
                exchanges_wrapper.api_pb2.FetchOrderResponse,
            ),
            '/martin.Martin/ResetRateLimit': grpclib.const.Handler(
                self.ResetRateLimit,
                grpclib.const.Cardinality.UNARY_UNARY,
                exchanges_wrapper.api_pb2.OpenClientConnectionId,
                exchanges_wrapper.api_pb2.SimpleResponse,
            ),
            '/martin.Martin/OnKlinesUpdate': grpclib.const.Handler(
                self.OnKlinesUpdate,
                grpclib.const.Cardinality.UNARY_STREAM,
                exchanges_wrapper.api_pb2.FetchKlinesRequest,
                exchanges_wrapper.api_pb2.OnKlinesUpdateResponse,
            ),
            '/martin.Martin/FetchFundingWallet': grpclib.const.Handler(
                self.FetchFundingWallet,
                grpclib.const.Cardinality.UNARY_UNARY,
                exchanges_wrapper.api_pb2.FetchFundingWalletRequest,
                exchanges_wrapper.api_pb2.FetchFundingWalletResponse,
            ),
            '/martin.Martin/TransferToMaster': grpclib.const.Handler(
                self.TransferToMaster,
                grpclib.const.Cardinality.UNARY_UNARY,
                exchanges_wrapper.api_pb2.MarketRequest,
                exchanges_wrapper.api_pb2.SimpleResponse,
            ),
            '/martin.Martin/CheckStream': grpclib.const.Handler(
                self.CheckStream,
                grpclib.const.Cardinality.UNARY_UNARY,
                exchanges_wrapper.api_pb2.MarketRequest,
                exchanges_wrapper.api_pb2.SimpleResponse,
            ),
            '/martin.Martin/OneClickArrivalDeposit': grpclib.const.Handler(
                self.OneClickArrivalDeposit,
                grpclib.const.Cardinality.UNARY_UNARY,
                exchanges_wrapper.api_pb2.MarketRequest,
                exchanges_wrapper.api_pb2.SimpleResponse,
            ),
        }


class MartinStub:

    def __init__(self, channel: grpclib.client.Channel) -> None:
        self.OpenClientConnection = grpclib.client.UnaryUnaryMethod(
            channel,
            '/martin.Martin/OpenClientConnection',
            exchanges_wrapper.api_pb2.OpenClientConnectionRequest,
            exchanges_wrapper.api_pb2.OpenClientConnectionId,
        )
        self.FetchServerTime = grpclib.client.UnaryUnaryMethod(
            channel,
            '/martin.Martin/FetchServerTime',
            exchanges_wrapper.api_pb2.OpenClientConnectionId,
            exchanges_wrapper.api_pb2.FetchServerTimeResponse,
        )
        self.FetchOpenOrders = grpclib.client.UnaryUnaryMethod(
            channel,
            '/martin.Martin/FetchOpenOrders',
            exchanges_wrapper.api_pb2.MarketRequest,
            exchanges_wrapper.api_pb2.FetchOpenOrdersResponse,
        )
        self.CancelAllOrders = grpclib.client.UnaryUnaryMethod(
            channel,
            '/martin.Martin/CancelAllOrders',
            exchanges_wrapper.api_pb2.MarketRequest,
            exchanges_wrapper.api_pb2.SimpleResponse,
        )
        self.FetchExchangeInfoSymbol = grpclib.client.UnaryUnaryMethod(
            channel,
            '/martin.Martin/FetchExchangeInfoSymbol',
            exchanges_wrapper.api_pb2.MarketRequest,
            exchanges_wrapper.api_pb2.FetchExchangeInfoSymbolResponse,
        )
        self.FetchAccountInformation = grpclib.client.UnaryUnaryMethod(
            channel,
            '/martin.Martin/FetchAccountInformation',
            exchanges_wrapper.api_pb2.OpenClientConnectionId,
            exchanges_wrapper.api_pb2.FetchAccountBalanceResponse,
        )
        self.FetchOrderBook = grpclib.client.UnaryUnaryMethod(
            channel,
            '/martin.Martin/FetchOrderBook',
            exchanges_wrapper.api_pb2.MarketRequest,
            exchanges_wrapper.api_pb2.FetchOrderBookResponse,
        )
        self.FetchSymbolPriceTicker = grpclib.client.UnaryUnaryMethod(
            channel,
            '/martin.Martin/FetchSymbolPriceTicker',
            exchanges_wrapper.api_pb2.MarketRequest,
            exchanges_wrapper.api_pb2.FetchSymbolPriceTickerResponse,
        )
        self.FetchTickerPriceChangeStatistics = grpclib.client.UnaryUnaryMethod(
            channel,
            '/martin.Martin/FetchTickerPriceChangeStatistics',
            exchanges_wrapper.api_pb2.MarketRequest,
            exchanges_wrapper.api_pb2.FetchTickerPriceChangeStatisticsResponse,
        )
        self.FetchKlines = grpclib.client.UnaryUnaryMethod(
            channel,
            '/martin.Martin/FetchKlines',
            exchanges_wrapper.api_pb2.FetchKlinesRequest,
            exchanges_wrapper.api_pb2.FetchKlinesResponse,
        )
        self.FetchAccountTradeList = grpclib.client.UnaryUnaryMethod(
            channel,
            '/martin.Martin/FetchAccountTradeList',
            exchanges_wrapper.api_pb2.AccountTradeListRequest,
            exchanges_wrapper.api_pb2.AccountTradeListResponse,
        )
        self.OnTickerUpdate = grpclib.client.UnaryStreamMethod(
            channel,
            '/martin.Martin/OnTickerUpdate',
            exchanges_wrapper.api_pb2.MarketRequest,
            exchanges_wrapper.api_pb2.OnTickerUpdateResponse,
        )
        self.OnOrderBookUpdate = grpclib.client.UnaryStreamMethod(
            channel,
            '/martin.Martin/OnOrderBookUpdate',
            exchanges_wrapper.api_pb2.MarketRequest,
            exchanges_wrapper.api_pb2.FetchOrderBookResponse,
        )
        self.StopStream = grpclib.client.UnaryUnaryMethod(
            channel,
            '/martin.Martin/StopStream',
            exchanges_wrapper.api_pb2.MarketRequest,
            exchanges_wrapper.api_pb2.SimpleResponse,
        )
        self.StartStream = grpclib.client.UnaryUnaryMethod(
            channel,
            '/martin.Martin/StartStream',
            exchanges_wrapper.api_pb2.StartStreamRequest,
            exchanges_wrapper.api_pb2.SimpleResponse,
        )
        self.OnFundsUpdate = grpclib.client.UnaryStreamMethod(
            channel,
            '/martin.Martin/OnFundsUpdate',
            exchanges_wrapper.api_pb2.OnFundsUpdateRequest,
            exchanges_wrapper.api_pb2.OnFundsUpdateResponse,
        )
        self.OnBalanceUpdate = grpclib.client.UnaryStreamMethod(
            channel,
            '/martin.Martin/OnBalanceUpdate',
            exchanges_wrapper.api_pb2.MarketRequest,
            exchanges_wrapper.api_pb2.OnBalanceUpdateResponse,
        )
        self.OnOrderUpdate = grpclib.client.UnaryStreamMethod(
            channel,
            '/martin.Martin/OnOrderUpdate',
            exchanges_wrapper.api_pb2.MarketRequest,
            exchanges_wrapper.api_pb2.SimpleResponse,
        )
        self.CreateLimitOrder = grpclib.client.UnaryUnaryMethod(
            channel,
            '/martin.Martin/CreateLimitOrder',
            exchanges_wrapper.api_pb2.CreateLimitOrderRequest,
            exchanges_wrapper.api_pb2.CreateLimitOrderResponse,
        )
        self.CancelOrder = grpclib.client.UnaryUnaryMethod(
            channel,
            '/martin.Martin/CancelOrder',
            exchanges_wrapper.api_pb2.CancelOrderRequest,
            exchanges_wrapper.api_pb2.CancelOrderResponse,
        )
        self.FetchOrder = grpclib.client.UnaryUnaryMethod(
            channel,
            '/martin.Martin/FetchOrder',
            exchanges_wrapper.api_pb2.FetchOrderRequest,
            exchanges_wrapper.api_pb2.FetchOrderResponse,
        )
        self.ResetRateLimit = grpclib.client.UnaryUnaryMethod(
            channel,
            '/martin.Martin/ResetRateLimit',
            exchanges_wrapper.api_pb2.OpenClientConnectionId,
            exchanges_wrapper.api_pb2.SimpleResponse,
        )
        self.OnKlinesUpdate = grpclib.client.UnaryStreamMethod(
            channel,
            '/martin.Martin/OnKlinesUpdate',
            exchanges_wrapper.api_pb2.FetchKlinesRequest,
            exchanges_wrapper.api_pb2.OnKlinesUpdateResponse,
        )
        self.FetchFundingWallet = grpclib.client.UnaryUnaryMethod(
            channel,
            '/martin.Martin/FetchFundingWallet',
            exchanges_wrapper.api_pb2.FetchFundingWalletRequest,
            exchanges_wrapper.api_pb2.FetchFundingWalletResponse,
        )
        self.TransferToMaster = grpclib.client.UnaryUnaryMethod(
            channel,
            '/martin.Martin/TransferToMaster',
            exchanges_wrapper.api_pb2.MarketRequest,
            exchanges_wrapper.api_pb2.SimpleResponse,
        )
        self.CheckStream = grpclib.client.UnaryUnaryMethod(
            channel,
            '/martin.Martin/CheckStream',
            exchanges_wrapper.api_pb2.MarketRequest,
            exchanges_wrapper.api_pb2.SimpleResponse,
        )
        self.OneClickArrivalDeposit = grpclib.client.UnaryUnaryMethod(
            channel,
            '/martin.Martin/OneClickArrivalDeposit',
            exchanges_wrapper.api_pb2.MarketRequest,
            exchanges_wrapper.api_pb2.SimpleResponse,
        )
